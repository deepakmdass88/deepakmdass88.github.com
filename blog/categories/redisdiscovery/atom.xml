<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RedisDiscovery | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/redisdiscovery/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2014-10-15T01:09:14+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak M Das]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[McoMaster - An HTML5 based GUI for Mcollective with Redis Discovery Method]]></title>
    <link href="http://beingasysadmin.com/blog/2013/05/28/mcomaster-an-html5-based-gui-for-mcollective-with-redis-discovery-method/"/>
    <updated>2013-05-28T09:46:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2013/05/28/mcomaster-an-html5-based-gui-for-mcollective-with-redis-discovery-method</id>
    <content type="html"><![CDATA[<p><code>Mcollective</code> is a framework to build server orchestration or parallel job execution systems. It's completely built on  <strong>RUBY</strong>, and offcourse <a href="https://github.com/puppetlabs/puppetlabs-mcollective">Open Sourced</a>. There are a quite good <a href="https://github.com/puppetlabs/mcollective-plugins">plugins</a> available for mcollective. In my previous blog's i've explained on how to setup Mcollective with ActiveMQ and also how to use Mongo Discovery method with Mcollective. In this blog i will explain on how to use Mcollective with Rabbitmq connector and a new project called <a href="http://mcomaster.org">mcomaster</a>, an HTML5 web interface to mcollective, which uses <em>REDIS</em> Discovery method in the backend.</p>

<h3>Setting up RabbitMQ</h3>

<p>First add the <code>RaabitMQ</code> APT repo,</p>

<pre><code>$ echo "deb http://www.rabbitmq.com/debian/ testing main" &gt;&gt; /etc/apt/sources.list

$ curl -L -o ~/rabbitmq-signing-key-public.asc http://www.rabbitmq.com/rabbitmq-signing-key-public.asc 

$ apt-key add ~/rabbitmq-signing-key-public.asc

$ apt-get update
</code></pre>

<p>And install the RabbitMQ server</p>

<pre><code>$ apt-get install rabbitmq-server
</code></pre>

<p>Now using <code>rabbitmqctl</code> create a vhost "<em>/mcollective</em>". Also create a user called "<strong>mcollective</strong>" in Rabbitmq using rabbitmqctl and give full permission for this user to the new mcollective vhost.</p>

<pre><code>$ rabbitmqctl add_vhost /mcollective

$ rabbitmqctl add_user mcollective mcollective

$ rabbitmqctl set_permissions -p /mcollective mcollective ".*" ".*" ".*"
</code></pre>

<p>There is also managemnet gui for rabbitmq, we can perform all the above tasks from that also. For that we need enable the management plugin in rabbitmq.</p>

<pre><code>$ rabbitmq-plugins enable rabbitmq_management
</code></pre>

<p>And restart rabbitmq server. After restarting, we can access the gui using "<em>http://ip:55672</em>". Login user is "<em>guest</em>", password is "<em>guest</em>". We need to create two exchanges that the mcollective plugin needs. We can use the <code>rabbitmqadmin</code> command as mentioned in the Mcollective <a href="http://docs.puppetlabs.com/mcollective/reference/plugins/connector_rabbitmq.html">Documentation</a> or we can use the Management GUI for that.</p>

<pre><code>$ rabbitmqadmin declare exchange vhost=/mcollective name=mcollective_broadcast type=topic

$ rabbitmqadmin declare exchange vhost=/mcollective name=mcollective_directed type=direct 
</code></pre>

<h3>Configuring Mcollective</h3>

<p>Now install the mcollective from APT repository. We can use the puppetlabs APT repo for the latest versions.</p>

<pre><code>$ echo "deb http://apt.puppetlabs.com precise main" &gt;&gt; /etc/apt/sources.list

$ wget -o /tmp/pubkey.gpg apt.puppetlabs.com/pubkey.gpg &amp;&amp; apt-key add /tmp/pubkey.gpg

$ apt-get intstall mcollective
</code></pre>

<p>Now go to "<em>/etc/mcollective/</em>" folder and open the <code>server.cfg</code> file and add the below lines to enable the rabbitmq connector.</p>

<pre><code>direct_addressing = 1

connector = rabbitmq
plugin.rabbitmq.vhost = /mcollective
plugin.rabbitmq.pool.size = 1       =&gt; increase this value, if you are going to use rabbitmq cluster
plugin.rabbitmq.pool.1.host = stomp.example.com
plugin.rabbitmq.pool.1.port = 61613
plugin.rabbitmq.pool.1.user = mcollective
plugin.rabbitmq.pool.1.password = marionette
</code></pre>

<p>And restart the mcollective service, to make the changes to come effect.</p>

<h3>Setting up McoMaster</h3>

<p>Mcomaster is an HTML5 web interface to mcollective, which uses REDIS discovery method. Thanks to <a href="https://github.com/ajf8/mcomaster">@ajf8</a> for such a wonderful project. Clone the repository from <a href="https://github.com/ajf8/mcomaster">github</a>.</p>

<pre><code>$ git clone https//github.com/ajf8/mcomaster.git
</code></pre>

<p>Now copy the <code>meta.rb</code> registration file to the mcollective extension directory of all the Mcollective servers.</p>

<pre><code>$ cp mcollective/registration/meta.rb /usr/share/mcollective/plugins/mcollective/registration/meta.rb
</code></pre>

<p>We need to enable the registration agent on ALL nodes with the following server.cfg settings</p>

<pre><code>registerinterval = 300
registration = Meta
</code></pre>

<p>Now enable <code>direct addressing</code> by adding the below line in the server.cfg of all the server's where we have copied the meta registration plugin.</p>

<pre><code>direct_addressing=1
</code></pre>

<p>We need one mcollective node which receives the registrations and saves them in redis. Ensure that Redis server is installed on that server. We can use the same server where we are going to install mcomaster.</p>

<pre><code>$ cp mcollective/agent/registration.rb /usr/share/mcollective/plugins/mcollective/agent/
</code></pre>

<p>Add the redis server details to the server.cfg on the server which receives the registrations.</p>

<pre><code>plugin.redis.host = localhost
plugin.redis.port = 6379
plugin.redis.db = 0
</code></pre>

<p>Install mcollective clinet on the server where we are installing the mcomaster. Then configure the discovery agent, which will query the redis database for discovery data.</p>

<pre><code>$ cp mcollective/discovery/redisdiscovery.* /usr/share/mcollective/plugins/mcollective/discovery/
</code></pre>

<p>And add the following settings to the <code>client.cfg</code></p>

<pre><code>plugin.redis.host = localhost
plugin.redis.port = 6379
plugin.redis.db = 0
default_discovery_method = redisdiscovery
direct_addressing = yes
</code></pre>

<p>Using <code>mco</code> command we can check the node discovery using redisdiscovery method, which is the default mwthod now.. The old <code>mc</code> method will also works.</p>

<pre><code>root@testcloud:~# mco rpc rpcutil ping --dm redisdiscovery -v
info 2013/05/29 10:08:45: rabbitmq.rb:10:in `on_connecting' TCP Connection attempt 0 to stomp://mcollective@localhost:61613
info 2013/05/29 10:08:45: rabbitmq.rb:15:in `on_connected' Conncted to stomp://mcollective@localhost:61613
Discovering hosts using the redisdiscovery method .... 4

 * [ ============================================================&gt; ] 4 / 4


deeptest                                : OK
    {:pong=&gt;1369802330}

ubuntults                               : OK
    {:pong=&gt;1369802330}

debwheez                                : OK
    {:pong=&gt;1369802330}

testcloud                               : OK
    {:pong=&gt;1369802326}



---- rpcutil#ping call stats ----
           Nodes: 4 / 4
     Pass / Fail: 4 / 0
      Start Time: 2013-05-29 10:08:46 +0530
  Discovery Time: 30.95ms
      Agent Time: 85.24ms
      Total Time: 116.19ms
info 2013/05/29 10:08:46: rabbitmq.rb:20:in `on_disconnect' Disconnected from stomp://mcollective@localhost:61613
</code></pre>

<p>Go to McoMaster repo folder, and run <code>bundle install</code> to install all the dependency gems. Copy th existing application.example.yml and create a new <em>application.yml</em> file. Edit this file and fill in the Username, Password, Redis server details etc. Create a new <code>database.yml</code> and fill in the database details. I'm using MYSQL as the database backend. Below is my config.</p>

<pre><code>production:
  adapter: mysql
  database: mcollective
  username: mcollective
  password: mcollective
  host: localhost
  socket: "/var/run/mysqld/mysqld.sock"

development:
  adapter: mysql
  database: mcollective
  username: mcollective
  password: mcollective
  host: localhost
  socket: "/var/run/mysqld/mysqld.sock"
</code></pre>

<p>We need to migrate the database,</p>

<pre><code>$ RAILS_ENV=production rake db:reset
</code></pre>

<p>After that, we need to compile the assets,</p>

<pre><code>$ rake assets:precompile
</code></pre>

<p>Let's start the server,</p>

<pre><code>$ rails server -e production
</code></pre>

<p>The above command will make the application to listen to default port "<em>3000</em>". Access the McoMaster GUI from the browwser using the username and password added in the "<em>application.yml</em>" file. Once we login, we will be able to see the nodes discovered through the redisdiscovery method. If we add the plugins like <em>service</em> and <em>process</em>, we will be able to see the plugins showing up in the mcomaster, and we can also run these plugins with in the McoMaster.</p>

<p>This is a screenshot of the MCoMaster dashboard.</p>

<p><img src="/images/mcomaster.png"></p>
]]></content>
  </entry>
  
</feed>
