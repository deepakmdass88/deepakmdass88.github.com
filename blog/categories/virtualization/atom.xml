<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: virtualization | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2015-02-06T10:23:38+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak Mohandas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Virtualization using Linux Containers]]></title>
    <link href="http://beingasysadmin.com/blog/2013/03/19/virtualiation-using-linux-containers/"/>
    <updated>2013-03-19T23:18:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2013/03/19/virtualiation-using-linux-containers</id>
    <content type="html"><![CDATA[<p><strong>LXC</strong> or <strong>Linux Continers</strong> is is an operating system-level virtualization, using which we can run multiple isolated Linux systems on a single host.  LXC relies on the <a href="http://en.wikipedia.org/wiki/Cgroups">cgroups</a> functionality of the Linux Kernels. <em>Cgroups (control groups)</em> is a Linux kernel feature to limit, account and isolate resource usage (CPU, memory, disk I/O, etc.) of process groups. LXC does not provide a virtual machine, but rather provides a virtual environment that has its own process and network space. It is similar to a chroot, but offers much more isolation.</p>

<p>First, let's install the necessary packages.</p>

<pre><code>$ apt-get install lxc btrutils
</code></pre>

<p>By default in Ubuntu, when we install the lxc package, it will create a default bridge network called "lxcbr0". If we don't want to use this bridge network, we can disbale it by editing the <code>/etc/default/lxc</code> file. We can also create bridge networks using the <strong><em>"btrcl"</em></strong> or we can directly define the bridge networks in the interfaces file. There are a few templates, which gts shipped with the lxc package, which will be present in the <code>/usr/share/lxc/template</code>. I'm going to use the default template to create the containers. We can also use OPENVZ templates to create containers.</p>

<p>I'm going to keep my keep all my container's files in a default path say "/lxc"</p>

<pre><code>$ mkdir /lxc
</code></pre>

<p>Now we can create the first debian container.</p>

<pre><code>$ mkdir /lxc/vm0    # where vm0 is the name of my conatiner.

$ /usr/share/lxc/templates/lxc-debian -p /lxc/vm0
</code></pre>

<p>Now this will install and build the necessary files for the container. If we go inside the vm0 folder, we can see two things, one is the config file, and second is the root folder of the container. This root folder will be the virtual environment for our container. Now we can edit the config file, to mention the default Network options.</p>

<pre><code>lxc.network.ipv4 = 192.168.0.123/24 # IP address should end with CIDR
lxc.network.hwaddr = 4a:59:43:49:79:bf # MAC address
lxc.network.link = br0 # name of the bridge interface
lxc.network.type = veth 
lxc.network.veth.pair = veth_vm0
</code></pre>

<p>Now we need to add the ip to the lxc's interface file alos, for that we need to edit the <code>/lxc/vm0/rootfs/etc/network/interfaces</code> file and set the ip address in it for the interface <em>eth0</em>
We can create a bridge interface and we can bind it with the physical interface of the host, so that the lxc will be in the same network as that of the host. If there is a virtual network already existing, for example, when we install libvirt, it will create a bridge interface called "virbr0", or in Ubuntu the lxc package installation wil create a bridge interface called 'lxcbr0', we can alos use those with lxc. Or we can define a bridge interface in the "interfaces" file. Below is a configuration of creating a bridge interface.</p>

<pre><code>    auto eth0
    iface eth0 inet manual

# Bridge setup
    iface br0 inet static
        bridge_ports eth0 
        address 192.168.0.2
        broadcast 192.168.0.255
        netmask 255.255.255.0
        gateway 192.168.0.1
</code></pre>

<p>If a separate network has to be given for the lxc's, then we can to go for NATing. The below configuration on the interfaces file is for the NAT enabled.</p>

<pre><code>auto br0
iface br0 inet static
address 172.16.0.1
netmask 255.255.255.0
bridge_stp off
bridge_maxwait 5
pre-up  /usr/sbin/brctl addbr br0
post-up /usr/sbin/brctl setfd br0 0
post-up /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
post-up echo 1 &gt; /proc/sys/net/ipv4/ip_forward
</code></pre>

<p>Once we are ready with the configurations, we can start our container using the below command.</p>

<pre><code>$ lxc-start -n vm0 -f /lxc/vm0/config
</code></pre>

<p>In the NAT scenario, the lxc machines are under the "172.16" network, while the host lies in "192.168.0" network. There are some good projects which works around with lxc, <a href="https://github.com/chrisroberts/vagabond">vagabond</a> is an example for that.Vagabond is a tool integrated with Chef to build local nodes easily and most importantly, quickly. Vagabond is built for Chef.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Foreman with Puppet and Libvirt]]></title>
    <link href="http://beingasysadmin.com/blog/2013/03/07/using-foreman-with-puppet-and-libvirt/"/>
    <updated>2013-03-07T09:39:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2013/03/07/using-foreman-with-puppet-and-libvirt</id>
    <content type="html"><![CDATA[<p><em>TheForeman</em> is one of the best provisioning tools available. It's purely open-sourced. And it natively supports <strong><em>puppet</em></strong> for provisioning the nodes. Foreman can talk to <strong>libvirt</strong> also, which makes us easy to create a VM and provision it on the way. In this blog i will be explaining on how to install Foreman from the source, how to integrate it with puppet to receive the logs and facts and make Foreman to use Libvirt for building VM's.</p>

<h3>Setting up Foreman</h3>


<p>First will install the basic depenencies. Since i'm using the git repository of Foreman for installation, git package has to be installed. Moreover we also need a database for Foreman. I'm going to use Mysql for that.</p>

<pre><code>$ apt-get install git mysql-server ruby-mysql libmysql-ruby1.9.1 libmysqlclient-dev libvirt-dev 
</code></pre>

<p>Now clone the repository from github. The newer build's works with <em>Puppet 3.0</em>.</p>

<pre><code>$ git clone https://github.com/theforeman/foreman.git -b develop
</code></pre>

<p>Ensure that "<strong><em>ruby</em></strong> and <strong><em>bundler</em></strong>" is installed in the machine.</p>

<pre><code>$ bundle install --without postgresql sqlite
</code></pre>

<p>Now we can start configuring Foreman. Copy the sample config files.</p>

<pre><code>$ cp config/settings.yaml.example config/settings.yaml
$ cp config/database.yml.example config/database.yml
</code></pre>

<p>Now create a database for FOreman and add the database details in the <code>database.yml</code>. Now add the puppet master details in the <code>settings.yaml</code>. Since i'm going to use the Foreman in production mode, i've commented out the Development and test environment setting in <code>database.yml</code>. Once the config files are set, we can now go ahead with db migration.</p>

<pre><code>$ RAILS_ENV=production bundle exec rake db:migrate
</code></pre>

<p>Now we can check whether the server is fine or not by using the following command. The below command will start the Foreman with the builtin web server, and we can access the webui from <code>http://foreman_ip:3000</code> in the browser. By default there is no authentication set for the WebUI. But LDAP Authentication can be set for the WebUI. Details are availabe in the foreman's <a href="http://theforeman.org/manuals/1.1/index.html#4.1WebInterface">documentation</a>.</p>

<pre><code>$ RAILS_ENV=production rails server
</code></pre>

<p>Once the Foreman server is working fine, we can configure puppet to send its logs and facts to foreman. In the puppet clients, add <code>report = true</code> in the puppet.conf file. Now in the puppet master, we need to do a few stuffs.</p>

<p>Copy this foreman <a href="https://raw.github.com/theforeman/puppet-foreman/master/templates/foreman-report.rb.erb">report</a> file to puppet's report library.</p>

<p>In my case it is <code>/usr/lib/ruby/vendor_ruby/puppet/reports/</code> and rename it to foreman.rb. Now add <code>reports=log, foreman</code> in the <strong><em>puppet.conf</em></strong> file. Also add the foreman url in the foreman.rb file.</p>

<pre><code>foreman_url='http://foreman:3000    # or use ip instead of foreman, if DNS/Host entry is not there for Foreman
</code></pre>

<p>Now for sending facts to puppet, we can put a cron job to execute the below command</p>

<pre><code>$ rake puppet:import:hosts_and_facts RAILS_ENV=production
</code></pre>

<p>Now once the puppet clients starts running, they will send the logs to Foreman, and can be viewed in the WebUI.</p>

<h3>Foreman and Libvirt</h3>


<p>Now in the same machine i've installed libvirt and libvirt-ruby. Now create a user "foreman" and generate ssh-key for the user. Now copy the public key to the "authorized_keys" file of the root user. This is actually needed if your libvirt host is different.</p>

<p>Now go to the Foreman WebUI, Go to  <strong><em>More</em></strong> -----> <strong><em>provisioning</em></strong> -----> <strong><em>Compute Resources</em></strong>. Now click on "New Compute Resource", Add a name for the Resource, Select the provider as <em>Libvirt</em>, and URL is <code>qemu:///system</code>, since libvirt and foreman resides on the same system. We can also test the connection to libvirt. IF the parameters we entered are fine, Foreman can talk to libvirt directly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Custom Vagrant Boxes]]></title>
    <link href="http://beingasysadmin.com/blog/2013/01/21/building-custom-vagrant-boxes/"/>
    <updated>2013-01-21T16:52:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2013/01/21/building-custom-vagrant-boxes</id>
    <content type="html"><![CDATA[<p><code>Vagrant</code> has become a common tool used by most of the sys admins who play around with computers. It has made virtualization so easy. Seriously it's a must have tool. <strong><em>Vagrant</em></strong> supports <strong>Puppet/Chef</strong> provisioning, which makes it even more powerfull. We just need the base boxes to play around with Vagrant. In this blog i will be explaing about creating custom Vagrant Boxes. I work for <a href="http://www.deeproot.in">DeepRootLinux</a>, developers of the deepOfix Mail Server, a Debian based GNU/Linux distribution. I will be using our distribution for creating base box. It will help us to deploy deepOfix VM in a faster way and we it helps us to test our custom puppet modules into our operating system.</p>

<p>SO first we need to create a base VM in the Virtualbox. Ensure that the network controller is set to <strong><em>"NAT"</em></strong>. For port forwarding to work properly, NAT must be used. There a few point to remember, As per the Vagrant's Documentation, Vagrant makes some assumptions,</p>

<ul>
<li>The root password is "<strong><em>Vagrant</em></strong>"</li>
<li>One user account "<strong><em>vagrant</em></strong>" with password "<strong><em>vagrant</em></strong>".</li>
<li>Domain is "<strong><em>vagrantup.com</em></strong>"</li>
<li>Hostname is  "<strong><em>vagrant-[os-name]</em></strong>", e.g. vagrant-debian-lenny</li>
</ul>


<p>If any different values are being used, it has to be specified in the <code>Vagrantfile</code>. I've used custom domain name and hostname and i did not mentioned it in my Vagrant file. But it did not created any problem. Anyways Vagrant is using key-based authentication for SSH. So once we SSH into the system, we will login in to the system as the <strong><em>Main user</em></strong>, in our case "<em>vagrant</em>" user. So we should make this "<em>vagrant</em>" user as a member of the "<strong><em>sudo (super user doers)</em></strong>" group, so that we can use "sudo su" to switch to the root user.</p>

<p>Normally, using sudo will always prompt for the user password, we can remove this by modifying the <code>/etc/sudoers</code> file. We just need to add one line into the file "<strong><em>%sudo ALL=NOPASSWD: ALL</em></strong>". This will prevent password prompt for the user's who are the member's of the sudo group. Once the file is edited, we need to do "<strong><em>/etc/init.d/sudo restart</em></strong>" to reflect the changes.We can verify that sudo works without a password, but logging into the sudo user account, then sudo which sudo. We should get output similar to "/usr/bin/sudo".</p>

<p>Now we need to setup <em>Virtualbox Guest Additions</em>. So, first we need to build the necessary packages.</p>

<pre><code>apt-get install linux-headers-$(uname -r) build-essential    # for root user

sudo apt-get install linux-headers-$(uname -r) build-essential    # for sudo user's
</code></pre>

<p> We need to insert the guest additions image by using the GUI and clicking on "<strong><em>Devices</em></strong>" followed by "<strong><em>Install Guest Additions</em></strong>". And we need to mount the CDROM.</p>

<pre><code>mount /dev/hd0 /media/cdrom     # where /dev/hd0 is the CDROM block device in deepOfix
</code></pre>

<p>And finally, run the shell <em>script</em> which matches our system.</p>

<pre><code>sh /media/cdrom/VBoxLinuxAdditions.run
</code></pre>

<p>Since Vagrant only supports <em>key-based authentication for SSH</em>, we must setup the SSH user to use key-based authentication. We need to copy a public key into "<strong><em>~/.ssh/authorized_keys</em></strong>" of the "<em>vagrant</em>" user. Vagrant provides an "<em>insecure</em>" pair of public and private keys which are available <a href="https://github.com/mitchellh/vagrant/tree/master/keys/">here</a>. Once the public key is copied, we can shut down our VM. And we can start building our base box.</p>

<pre><code>vagrant package --base &lt;box_name&gt;
</code></pre>

<p>If there is any custom option to be set like, using a specific port port forwarding, or a specific SSH keys, we can create a <code>Vagrantfile</code> with all custom options and we can use it during the packaging.</p>

<pre><code>vagrant package --base &lt;bxo_name&gt; --vagrantfile Vagrantfile
</code></pre>

<p>If everything goes fine, it will generate a base box file. We can use this base box file anywhere with the vagrant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant: Make Virtualization Easier]]></title>
    <link href="http://beingasysadmin.com/blog/2012/11/26/vagrant-make-virtualization-easier/"/>
    <updated>2012-11-26T18:21:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2012/11/26/vagrant-make-virtualization-easier</id>
    <content type="html"><![CDATA[<p><strong><em>Vagrant</em></strong> is a light weight virtualization tool, build over Oracle's <code>VirtualBox</code>. It's completely written in ruby and it's very easy to install and configure. The only dependency is <code>VirtualBox</code>. Once VirtualBox is installed, we can either use <code>RubyGems</code> to install <code>Vagrant</code> or we can get the installer from <a href="http://downloads.vagrantup.com/">Vagrant</a>.</p>

<p>I prefer ruby gems, So</p>

<pre><code>$ gem install vagrant
</code></pre>

<p>That's it, it will install vagrant. Now we need to get the base box. Vagrant uses the base boxes to build the VM's. We can download the base boxes from <a href="http://www.vagrantbox.es/">Vagrant Boxes</a>. we can directly use the url to create the boxes, but it's alwasy good if we have a downloaded copy of the base boxes.</p>

<p>Basically we need to follow just 3 steps. <em>add</em>,<em>initialize</em>,<em>up</em>. So once we have the base box just add the base box.</p>

<pre><code>$ vagrant box add new_box_name our_downloaded_basebox_file

example,
$ vagrant box add mybox precise32.box
</code></pre>

<p>Now just do a <strong>vagrant init</strong> to create the <code>Vagrantfile</code>. This is the main configuration file. If we go through the <code>Vagrantfile</code>, we can see a bunch of options like port forward, provisioning, setting network and so on. If only one vm is required, then we just have to add the <em>new_box</em> name which we created at the <code>config.vm.box=</code> option int the <code>Vagrantfile</code>. And <strong>vagrant up</strong> will start the VM.</p>

<p>But one of the most important feature of <strong><em>Vagrant</em></strong> is it suports multiple VM's over one single box. But we have to define those VM's in the <code>Vagrantfile</code>. Below i've defined two VM's in my <code>Vagrantfile</code>, also comment out <strong>config.vm.box=base</strong></p>

<pre><code>config.vm.define :ubuntu do |ubuntu_config|
     ubuntu_config.vm.box = "precise32"
end
config.vm.define :puppet do |puppet_config|
     puppet_config.vm.box = "precise32"
end
</code></pre>

<p>Where <em>ubuntu</em> and <em>puppet</em> are the name of the VM's. And <em>precise32</em> is the name of the the box which i've created. Now, <strong>vagrant up</strong> will start all the VM's. But we can mention the name to start a specific VM. Like <strong>vagrant up ubuntu</strong>. It will start only the <strong>ubuntu</strong> VM.</p>

<p>Provisioning is another important feature of Vagrant. We can use <strong><em>puppet</em></strong>,<strong><em>chef</em></strong> and <strong><em>shell</em></strong> scripts to bootstrap the vm's. I saw <a href="https://twitter.com/mitchellh">@mitchellh's</a> talk at <a href="http://www.youtube.com/watch?v=UTQQggVx4sI&amp;feature=BFa&amp;list=PLV86BgbREluVFB73Wwqp_tCbw5Z9TMLX1">PuppetConf 2012</a>, in which he mentioned about how to create a <strong>Fully Automated Puppet Master</strong> using the <strong>shell</strong> provisioner. I've tried this out using a shell script that will install puppet master and genrate the ssl certificates. It's working fine, soon i will post it here.</p>
]]></content>
  </entry>
  
</feed>
