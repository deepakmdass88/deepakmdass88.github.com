<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lumberjack | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/lumberjack/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2014-04-07T12:00:32+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak M Das]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Real Time Web-Monitoring using Lumberjack-Logstash-Statsd-Graphite]]></title>
    <link href="http://beingasysadmin.com/blog/2013/06/27/real-time-web-monitoring-using-lumberjack-logstash-statsd-graphite/"/>
    <updated>2013-06-27T16:29:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2013/06/27/real-time-web-monitoring-using-lumberjack-logstash-statsd-graphite</id>
    <content type="html"><![CDATA[<p>For the last few days i was playing around with my two of my favourite tools <em>Logstash</em> and <em>StatsD</em>. <strong><em>Logstash, StatsD, Graphite</em></strong> together makes a killer combination. So i decided to test this combination along with Lumberjack for Real time Monitoring. I'm going to use, <em>Lumberjack</em> as the log shipper from the webserver, and then Logstash will stash the log's porperly and and using the statsd output plugin i will ship the metrics to Graphite. In my previous blog, i've explained how to use Lumberjack with Logstash. Lumberjack will be watching my test web server's access logs.</p>

<p>By default, i'm using the combined apache log format, but it doesnot have the original response time for each request as well as the total reponse time. So we need to modify the LogFormat, in order to add the two. Below is the LogFormat which i'm using for my test setup.</p>

<pre><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %O \"%{Referer}i\" \"%{User-Agent}i\" %D %&gt;D" combined
</code></pre>

<p>Once the LogFormat is modified, restart the apache service in order to make the change to be effective.</p>

<h4>Setting up Logstash Server</h4>

<p>First Download the latest Logstash Jar file from the Logstash <a href="https://logstash.objects.dreamhost.com/release/logstash-1.1.13-flatjar.jar">site</a>. Now we need to create a logstash conf file. By default there is a grok pattern available for apache log called "COMBINEDAPACHELOG", but since we have added the tow new fields for the response time, we need to add the same for grok pattern also. So below is a pattern which is going to be used with Logstash.</p>

<pre><code>pattern =&gt; "%{COMBINEDAPACHELOG} %{NUMBER:resptime} %{NUMBER:resptimefull}"
</code></pre>

<p>So the Logstash conf file will look like this,</p>

<pre><code>input {
      lumberjack {
        type =&gt; "apache-access"
        port =&gt; 4444
        ssl_certificate =&gt; "/etc/ssl/logstash.pub"
        ssl_key =&gt; "/etc/ssl/logstash.key"
  }
}

filter {
  grok {
        type =&gt; "apache-access"
    pattern =&gt; "%{COMBINEDAPACHELOG} %{NUMBER:resptime} %{NUMBER:resptimefull}"
  }
}

output {
  stdout {
    debug =&gt; true
      }
  statsd {
    type =&gt; "apache-access"
    host =&gt; "localhost"
    port =&gt; 8125
    debug =&gt; true
    timing =&gt; [ "apache.servetime", "%{resptimefull}" ]
    increment =&gt; "apache.response.%{response}"
  }
}
</code></pre>

<h4>Setting up STATSD</h4>

<p>Now we can start setting up the StatsD daemon. By default, Ubuntu's latest OS ships with newer verision of NodeJS and NPM. So we can install it using APT/Aptitude.</p>

<pre><code>$ apt-get install nodejs npm
</code></pre>

<p>Now clone the StatsD github repository to the local machine.</p>

<pre><code>$ git clone git://github.com/etsy/statsd.git
</code></pre>

<p>Now create a local config file "localConfig.js" with the below contents.</p>

<pre><code>{
graphitePort: 2003
, graphiteHost: "127.0.0.1"
, port: 8125
}
</code></pre>

<p>Now we can start the StatsD daemon.</p>

<pre><code>$ node /opt/statsd/stats.js /opt/statsd/localConfig.js
</code></pre>

<p>The above command will start the StatsD in foreground. Now we can go ahead with setting up the Graphite.</p>

<h4>Setting up Graphite</h4>

<p>First, let's install the basic python dependencies.</p>

<pre><code>$ apt-get install python-software-properties memcached python-dev python-pip sqlite3 libcairo2 libcairo2-dev python-cairo pkg-config
</code></pre>

<p>Then, we can start installing Carbon and Graphite dependencies.</p>

<pre><code>        cat &gt;&gt; /tmp/graphite_reqs.txt &lt;&lt; EOF
        django==1.3
        python-memcached
        django-tagging
        twisted
        whisper==0.9.9
        carbon==0.9.9
        graphite-web==0.9.9
        EOF

$  pip install -r /tmp/graphite_reqs.txt
</code></pre>

<p>Now we can configure Carbon.</p>

<pre><code>$ cd /opt/graphite/conf/

$ cp carbon.conf.example carbon.conf
</code></pre>

<p>Now we need to create a storage schema.</p>

<pre><code>        cat &gt;&gt; /tmp/storage-schemas.conf &lt;&lt; EOF
        # Schema definitions for Whisper files. Entries are scanned in order,
        # and first match wins. This file is scanned for changes every 60 seconds.
        # [name]
        # pattern = regex
        # retentions = timePerPoint:timeToStore, timePerPoint:timeToStore
        [stats]
        priority = 110
        pattern = ^stats\..*
        retentions = 10s:6h,1m:7d,10m:1y
        EOF


$ cp /tmp/storage-schemas.conf /opt/graphite/conf/storage-schemas.conf
</code></pre>

<p>Also we need to create a log directory for graphite.</p>

<pre><code>$ mkdir -p /opt/graphite/storage/log/webapp
</code></pre>

<p>Now we need to copy over the local settings file and initialize database</p>

<pre><code>$ cd /opt/graphite/webapp/graphite/

$ cp local_settings.py.example local_settings.py

$ python manage.py syncdb
</code></pre>

<p>Fill in the necessary details including the super user details while initializing the database. Once the database is initialized we can start the carbon cache and graphite webgui.</p>

<pre><code>$ /opt/graphite/bin/carbon-cache.py start

$ /opt/graphite/bin/run-graphite-devel-server.py /opt/graphite
</code></pre>

<p>Now we can access the dashboard using the url, "http://ip-address:8080". Once we have started the carbon cache, we can start the Logstash server.</p>

<pre><code>$ java -jar logstash-1.1.13-flatjar.jar agent -f logstash.conf -v
</code></pre>

<p>Once the logstash has loaded all the plugins successfully, we can start shipping logs from the test webserver using Lumberjack. Since i've enabled the STDOUT plugin, i can see the output coming from the Logstash server. Now we can start accessing the real time graph's from graphite gui. There are several other alternative for the Graphite GUI like <a href="http://jondot.github.io/graphene/">Graphene</a>, <a href="https://github.com/paperlesspost/graphiti">Graphiti</a>, <a href="https://github.com/erezmazor/graphitus">Graphitus</a>, <a href="https://github.com/ripienaar/gdash">GDash</a>. Anyways Logstash-StatsD-Graphite proves to be a wonderfull combination.</p>
]]></content>
  </entry>
  
</feed>
