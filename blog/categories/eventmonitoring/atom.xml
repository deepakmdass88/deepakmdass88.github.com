<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: EventMonitoring | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/eventmonitoring/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2015-02-06T10:23:38+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak Mohandas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Near RealTime Dashboard with Kibana and Elasticsearch]]></title>
    <link href="http://beingasysadmin.com/blog/2014/04/07/near-realtime-dashboard-with-kibana-and-elasticsearch/"/>
    <updated>2014-04-07T09:39:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2014/04/07/near-realtime-dashboard-with-kibana-and-elasticsearch</id>
    <content type="html"><![CDATA[<p>Being in <em>DevOps</em> it's always Multi tasking. From Regular customer queries it goes through Monitoring, Troubleshooting etc. And offcourse when things breaks, it really becomes core multi tasking. Especially when you have a really scaling infrastructure, we should really understand what's really happening in our infrastructure. Yes we do have many new generation cloud monitoring tools like Sensu, but what if we have a near real time system that can tell us the each and every events happeing in our infrastructure. Logs are the best places where we can keep track of the events, even if the monitoring tools has missed it. We have a lot of log aggregator tools like tool Logstash, Splunk, Apache Kafka etc. And for log based event collection the common choice will be always <strong>Logstash -> StatsD -> Graphite</strong>. And ElasticSearch for indexing these.</p>

<p>My requirement was pretty straight. Record the events, aggregate them and keeps track of them in a timely manner. Kibana uses ElasticSearch facets for aggregating the search query results.Facets provide aggregated data based on a search query. So as a first task, i decided to visualize the location of user's who are registering their SIP endpoints on our SIP registrar server. Kibana gives us a good interface for the 2D heat map as well as a new option called <em>BetterMap</em>. Bettermap uses geographic coordinates to create clusters of markers on map and shade them orange, yellow and green depending on the density of the cluster. So from the logs, i just extracted the register events, and used a custom regex patterns to extract the details like the Source IP, usernames etc using logstash. Using the logstash's GeoIP filter, the Geo Locations of the IP can be identified. For the BetterMap, we need  coordinates, in geojson format. <em>GeoJSON</em> is <strong>[longitude,latitude]</strong> in an array. From the Geo Locations that we have identified in the GeoIP filter, we can create this GeoJSON for each event that we are receiving. Below is a sample code that i've used  in logstash.conf for creating the GeoJSON in Logstash.</p>

<pre><code>if [source_ip]  {
    geoip {
      type =&gt; "kamailio-registers"
      source =&gt; "source_ip"
      target =&gt; "geoip"
      add_field =&gt; ["[geoip][coordinates]","%{[geoip][longitude]}"]
      add_field =&gt; ["[geoip][coordinates]","%{[geoip][latitude]}"]
    }
    mutate {
      convert =&gt; [ "[geoip][coordinates]", "float" ]
    }
  }
</code></pre>

<p>The above filter will create a GeoJSON array "geoip.coordinates". This array can be used for creating the BetterMap in Kibana. Below are the settings for creating a BetterMap panel in the Kibana dashboard. While adding a new panel, select "bettermap" as the panel type, and the co-ordinate filed should be the one which contains the GeoJSON data. Make sure that the data is of the format [longitude,latitude], ie Longitude first and then followed by latitude.</p>

<p>{% img /images/bettermap_config.png %}</p>

<p>{% img /images/bettermap.png %}</p>

<p>Moving ahead, i decided to collect the events happening on our various other server's. We were one of the earliest companies who started using SIP (Session Initiation Protocol). SIP employs design elements similar to the HTTP request/response transaction model. So similar to web traffic, i've decided to collect events related to 4XX, 5XX and 6XX error responses, as it is very important to us. Once the logs are shipped to logstash, i wrote another custom grok pattern, which extracts the Error Code and Error responses, including the server which returned the same. These data's can be used for future analysis also. So i decided to store these on ElasticSearch. So now we have the real time event data's stored, but how to visualize. Since i dont have to perform much mathematical analytics with data, i decided to to remove graphite. Kibana has a wonder full GUI for visualizing the data. So decided to go ahead with Kibana. One option is "histogram" panel time. Using histogram we can visualize the data via a regular bar graph, as well as using the area graph. There is another panel type called "terms" which can be used to display the agrregated events via pie chart, bar chart, or a table. And below is what i achieved with Kibana.</p>

<p>{% img /images/SIP-kibana.png %}</p>

<p>{% img /images/SIP-pie.png %}</p>

<p>This is just an inital setup. I'm going to add more events to this. As of now Kibana + Elasticsearch proves to be a promising combination for displaying all near real time events happening in my Infrastructure.</p>
]]></content>
  </entry>
  
</feed>
