<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apt | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/apt/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2015-02-06T10:23:38+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak Mohandas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automating Debian Package Management]]></title>
    <link href="http://beingasysadmin.com/blog/2014/12/07/automating-debian-package-management/"/>
    <updated>2014-12-07T08:00:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2014/12/07/automating-debian-package-management</id>
    <content type="html"><![CDATA[<p>With the rise of CI tools like Jenkins/Gitlab and the rise of Config management tools, Continous integration became so flexible. Now if we check, most of the teams are using Git for Version control for their projects either via Github or Gitlab etc... and uses CI tools like Jenkins/Travis etc  to build and test the packages automatically whenever any change is pushed to the repo. An d finally once hte build is a success the packages are pushed to repo so that config management systems like Salt/Puppet/Ansible can go ahead and perform the upgrade. In my previos blogs, i've explained on how to build a Debian package and how to create and manage APT repo's via aptly. In this i'm going to automate the entire process.</p>

<p>So the flow is like, We have a github repo, and once a changed is pushed to the repo, github will send a hook to our Jenkins server which inturn triggers the Jenkins package build. Once the package has been succesfuly built, jenkins will automatically add the new packages to our repo and publish the same to our APT repo via <code>aptly</code></p>

<h4>Installing Jenkins</h4>

<p>First let's setup a Jenkins build server.</p>

<pre><code>$ wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -

$ echo "deb http://pkg.jenkins-ci.org/debian binary/" &gt; /etc/apt/sources.list.d/jenkins.list

$ apt-get update &amp;&amp; apt-get install jenkins

$ /etc/init.d/jenkins restart
</code></pre>

<p>Once this Jenkins service is started we can access it via "<em>http://jenkins-server-ip:8080</em>". By default there is no authentication, so accessing the URL will open up the Jenkins UI.</p>

<h4>Creating a Build Job in Jenkins</h4>

<p>In order to use a Git repo, we have to instsall the Git plugin first. Go to "<em>Manage Jenkins</em>" - > "<em>Manage Plugins</em>" - > "<em>Available</em>" and search for "<em>GIT plugin</em>" and install it. Once the Git plugin has been installed we can create a new build job.</p>

<p>Click on "<em>New Item</em>" on the Home Page and Select "<em>Freestyle Project</em>" and Click on "OK". On the Next page, we need to configure all the necessary steps for build job. Fill in the necessary details like Project Name, Description etc. Under "Source Code Management", select <code>Git</code> and enter the Repo URL. Make sure that the jenkins user has access to the repo. We can also use Deploy keys, but i've generated a separate ssh key for Jenkins user and the same has been added to Github. Under "<em>Build Triggers</em>" select 'Build when a change is pushed to GitHub' so that Jenkins will start the build job everytime when a change has been pushed to repo.</p>

<p>{% img /images/aptly1.png %}</p>

<p>{% img /images/aptly2.png %}</p>

<p>Under the <code>Build</code> section, Click on "<em>Add build step</em>" and select '<em>Execute shell</em>' and let's add our package build script which is stage 1.</p>

<pre><code>set -e
set -x
set -u
debuild -us -uc
</code></pre>

<p>Stage 2 is adding the newly build pacakge to our apt repo and publish the udpate to our repo so that our APT will server the new package</p>

<pre><code>aptly repo add myapt ../openvpn*.deb
/usr/bin/env script -qfc "aptly publish -passphrase=&lt;GPG passphrase&gt; update myapt"
</code></pre>

<p>{% img /images/aptly3.png %}</p>

<p>If you see my above command, i've used the <code>script</code> command. This is because, i was getting the error <code>aptly stderr: gpg: cannot open tty /dev/tty': No such device or address</code> whenever i try to update a repo. This is <a href="https://github.com/smira/aptly/issues/144">bug</a> in aptly. The fix has been placed on the Master branch but its not yet released. The <code>script</code> command is a temporary work around for this bug.</p>

<p>Now we have a Build job ready. We can manually trigger a build to test if the Job is working fine. If the build is successfull, we are done with our build server. Now the final step is Configuring Github to send a trigger whenever any change is pushed to Github.</p>

<h4>Configuring Github Triggers</h4>

<p>Go the Github repo and Click on the Repo settings. Open "<em>Webhooks and Services</em>" and select "<em>Add Service</em>" and select "<em>GitHub plugin</em>".Now it will ask for Jenkin's Hook URL, which is "<em>http://<Name of Jenkins server>:8080/github-webhook/</em>" and add the service. Once the service is set, we can click on "Test service" to check if the webhook is working fine.</p>

<p>{% img /images/aptly4.png %}</p>

<p>Once the test hook is created, go to the Jenkins job page and select "<em>GitHub Hook Log</em>". The test hook should get displayed there. If not there is something wrong on the config.</p>

<p>{% img /images/aptly5.png %}</p>

<p>Now we have a fully automated build and release management. Config management tools like Salt/Ansible etc.. can go ahead and start the deployment process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Debian packages]]></title>
    <link href="http://beingasysadmin.com/blog/2014/12/03/building-debian-packages/"/>
    <updated>2014-12-03T22:32:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2014/12/03/building-debian-packages</id>
    <content type="html"><![CDATA[<p>Installing applications via packages saves us a lot of time. Especially being an OPS oriented guy, compiling applications from source is somtimes pain and time consuming. Especially the dependencies. But later, after the rise of config management system, people started creating corresponding automated scripts that will install necessary dependencies and the ususal <code>make &amp;&amp; make install</code>. But if you check applications like Freeswitch was taking 15+min to finish compiliations, which is defintely a bad idea when you want to deploy the a new patch on a cluster. In such cases packages are really a life saver. Build the packages once as per our requirement and deploy it throughout the infrastructure. Now with the tools like jenkins,TravisCI etc we can attain a good level of CI.</p>

<p>In this blog, i'm going to explain on how to build a debian package from scratch. First let's install two main dependencies for a build machine</p>

<pre><code>$ apt-get install devscripts build-essential
</code></pre>

<p>For the past few days i was playing with <em>OpenVPN</em> and <em>SoftEther</em>. I'm going to build a simple debian package for OpenVPN from source. The current stable version of OpenVPN is available 2.3.6. First let's get the OpenVPN source code.</p>

<pre><code>$ wget http://swupdate.openvpn.org/community/releases/openvpn-2.3.6.tar.gz

$ tar xvzf openvpn-2.3.6.tar.gz &amp;&amp; cd openvpn-2.3.6
</code></pre>

<p>Now for building a package, first we need to create a <code>debian</code> folder. And in this folder we are going to place all necessary files required for building a package.</p>

<pre><code>$ mkdir debian
</code></pre>

<p>As per the Debian pacakging <a href="https://www.debian.org/doc/manuals/maint-guide/dreq.en.html">Documentation</a>, the mandatory files are <a href="https://www.debian.org/doc/manuals/maint-guide/dreq.en.html#rules">rules</a> <a href="https://www.debian.org/doc/manuals/maint-guide/dreq.en.html#control">control</a>, <a href="https://www.debian.org/doc/manuals/maint-guide/dreq.en.html#changelog">changelog</a>. <code>Changlog</code> file content should match the exact syntax, otherwise packaging will fail at the initial stage itself. There are some more optional files that we can <a href="https://www.debian.org/doc/manuals/maint-guide/dother.en.html">use</a>. Below are the files present in my <code>debian</code> folder</p>

<pre><code>changelog           =&gt; Changelog for my Package
control             =&gt; Contains Details about the package including the dependencies
dirs                =&gt; specifies any directories which we need but which are not created by the normal installation procedure, handled by 'dh_installdirs'
openvpn.default     =&gt; this file will be copied to /etc/default/openvpn
openvpn.init        =&gt; this file will be copied to /etc/init.d/openvpn, handled by 'dh_installinit'
postinst.debhelper  =&gt; Any action that need to be performed once the package installation is completed, like creating a specific user, starting service etc
postrm.debhelper        =&gt; Any action that need to be performed once the package removal is completed, like deleting a specific user
prerm.debhelper     =&gt; Any action that need to be performed before the package removal is initiated, like stopping the service
rules           =&gt; Contains rules for build procedure
</code></pre>

<p>In my case i wanted to install the openvpn on a custom location say '<strong>/opt/openvpn</strong>'. So if we are building from scratch manually, we can mention the prefix like '<strong>./configure --prefix=/opt/openvpn</strong>'. but in the build process, <code>dh_auto_configure</code> is running our '<strong>./configure</strong>' operation with dfault option ie, no custom prefix. So we need to overide this process if we want to have a custom prefix. Below is the content of my <code>rules</code> file.</p>

<pre><code># rules file

    #!/usr/bin/make -f
    # vim: tabstop=4 softtabstop=4 noexpandtab fileencoding=utf-8

    # Uncomment this to turn on verbose mode.
    export DH_VERBOSE=1

    DEB_DIR=$(CURDIR)/debian/openvpn

    %:
        dh $@
    override_dh_auto_configure:                      # override of configure
        ./configure --prefix=/opt/openvpn
</code></pre>

<p>Once we have all the necessary files in place, we can start the build process. Make sure that all the dependency packages mentioned in the <code>control</code> file is installed on the build server.</p>

<pre><code>    $ debuild -us -uc
</code></pre>

<p>If the build command is completed successfully, we will see the deb package as well as the source package just above our openvpn source folderm which is the default path where <code>dh_builddeb</code> places the files. We can overide the same too.</p>

<pre><code>#!/usr/bin/make -f
# vim: tabstop=4 softtabstop=4 noexpandtab fileencoding=utf-8

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

DEB_DIR=$(CURDIR)/debian/openvpn

%:
    dh $@
override_dh_auto_configure:
    ./configure --prefix=/opt/openvpn
override_dh_builddeb:
    dh_builddeb --destdir=./deb-pkg/
</code></pre>

<p>So now we have the Debian package. We can test installing it manually via '<strong>dpkg -i</strong>'. This was just a go thorugh on how to build a simple debian package. In my next blog, i'll be discussing about how to create and manage a private apt repository using a awsme tool called <a href="http://www.aptly.info/">aptly</a></p>
]]></content>
  </entry>
  
</feed>
