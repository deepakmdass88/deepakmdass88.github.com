<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DKIM | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/dkim/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2014-10-23T03:01:52+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak M Das]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DKIM Signing in QMAIL]]></title>
    <link href="http://beingasysadmin.com/blog/2013/04/30/dkim-signing-in-qmail/"/>
    <updated>2013-04-30T11:19:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2013/04/30/dkim-signing-in-qmail</id>
    <content type="html"><![CDATA[<p><em>DKIM</em> and <em>SPF</em> are becoming most commonly adopted methods for email validation. Even if we want to use the DMARC (<em>Domain-based Message Authentication, Reporting &amp; Conformance</em>), we need to configure  SPF and DKIM first. DMARC acts as a layer above the SPF and DKIM. DMARC allows the receiever's mail server to check if the Email is aligned properly as per the DMARC policy, and it queries the sender's DNS server for the DMARC action, ie, whether to reject or quarantine if alignment fails. The action will be mentioned in the TXT record on the Sender's DNS server. There is a good collection of DMARC training videos available in <a href="http://www.maawg.org/activities/training/dmarc-video-1">MAAWG site</a>. We will get a clear idea on how DMARC works from those videos.</p>

<p>In this post, i will explain on how to make Qmail to do DKIM sign on the outgoing mails. There is a <a href="http://www.brandonturner.net/blog/2009/03/dkim-and-domainkeys-for-qmail/">qmail-patch</a> method available, but since i'm using qmail-1.0.3 with custom patch, i was not able to use the DKIM patch along with my custom patch. So the next method is to use a wrapper around "qmail-remote", since qmail-remote is responsible for delivering remote mails, a wrapper around it will help us to sign the email and then start the remote delivery. There are a few wrappers mentioned in this <a href="http://www.memoryhole.net/qmail/#dkim">site</a>. I'm going to use this <a href="http://www.memoryhole.net/qmail/qmail-remote.sh">qmail-remote</a> wrapper.</p>

<h4>Initial Settings</h4>

<p>First move the current "<em>qmail-remote</em>" binary to "<em>qmail-remote.orig</em>". Now download the wrapper and move it to the <code>/var/qmail/bin/</code> file.</p>

<pre><code>$ mv /var/qmail/bin/qmail-remote /var/qmail/bin/qmail-remote.orig

$ wget -O /var/qmail/bin/qmail-remote "http://www.memoryhole.net/qmail/qmail-remote.sh"

$ chmod 755 /var/qmail/bin/qmail-remote
</code></pre>

<p>This wrapper depends on two programs, 1) <strong><em>dktest</em></strong>, which comes with the <a href="http://domainkeys.sourceforge.net/">libdomainkeys</a>,  2)  <a href="http://www.memoryhole.net/qmail/dkimsign.pl">dkimsign.pl</a>, which is perl script for signing the emails. Both these files, must be available at the path mentioned in the "qmail-remote" wrapper file.</p>

<p>Go through the "<em>dkimsign.pl</em>" script and install the Perl modules mentioned in it using cpan. There is no official debian package for libdomainkeys, so we need to compile it from the source.</p>

<h4>setting up dktest</h4>

<p>Download the latest source code from the sourceforge <a href="http://sourceforge.net/projects/domainkeys/">link</a>.</p>

<pre><code>$ tar -xzf libdomainkeys-0.69.tar.gz

$ cd libdomainkeys-0.69
</code></pre>

<p>Edit the Makefile and add "<em>-lresolv</em>" to the end of the "<em>LIBS</em>" line and run <code>make</code></p>

<pre><code>$ install -m 644 libdomainkeys.a /usr/local/lib

$ install -m 644 domainkeys.h dktrace.h /usr/local/include

$ install -m 755 dknewkey /usr/bin

$ install -m 755 dktest /usr/local/bin
</code></pre>

<h4>Generate Domain keys for the domains</h4>

<p>Before we can sign an email, we must create at least one <em>public/private key pair</em>. I'm going to create a key pair for the domain "example.com".</p>

<pre><code>$ mkdir -p /etc/domainkeys/example.com

$ cd /etc/domainkeys/example.com

$ dknewkey default 1024 &gt; default.pub

$ chown -R root:root /etc/domainkeys

$ chmod 640 /etc/domainkeys/example.com/default

$ chown root:qmail /etc/domainkeys/example.com/default
</code></pre>

<p>It is very important that the default file be readable only by root and the group which qmailr (the qmail-remote user) belongs to. Now add a <em>TXT</em> entry to the DNS for "<em>default._domainkey.example.com</em>" containing the quoted part in the <code>/etc/domainkeys/example.com/default.pub</code></p>

<p>Once everything is added, restart the "qmail-send" and send a test mail to any non local domain. IF things goes fine, we can see a line like the below in "qmail-send" log.</p>

<pre><code>$ @40000000517f518b1e1eb75c delivery 1: success: ktest_---_/tmp/dk2.sign.Gajw948FX1A1L0hugfQ/in_dkimsignpl_---_/tmp/dk2.sign.Gajw948FX1A1L0hugfQ/r74.125.25.27_accepted_message./Remote_host_said:_250_2.0.0_OK_1367298812_ps11si19566038pab.170_-_gsmtp/
</code></pre>

<p>Once the DKIM is working properly, add the SPF entries in our DNS, and we are ready to try out DMARC. DMARC is already in use by mail giants like Google,Yahoo,Paypal,Linkedin etc.</p>
]]></content>
  </entry>
  
</feed>
