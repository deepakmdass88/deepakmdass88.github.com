<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aptly | Welcome to My Nerd World]]></title>
  <link href="http://beingasysadmin.com/blog/categories/aptly/atom.xml" rel="self"/>
  <link href="http://beingasysadmin.com/"/>
  <updated>2015-02-06T10:23:38+00:00</updated>
  <id>http://beingasysadmin.com/</id>
  <author>
    <name><![CDATA[Deepak Mohandas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automating Debian Package Management]]></title>
    <link href="http://beingasysadmin.com/blog/2014/12/07/automating-debian-package-management/"/>
    <updated>2014-12-07T08:00:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2014/12/07/automating-debian-package-management</id>
    <content type="html"><![CDATA[<p>With the rise of CI tools like Jenkins/Gitlab and the rise of Config management tools, Continous integration became so flexible. Now if we check, most of the teams are using Git for Version control for their projects either via Github or Gitlab etc... and uses CI tools like Jenkins/Travis etc  to build and test the packages automatically whenever any change is pushed to the repo. An d finally once hte build is a success the packages are pushed to repo so that config management systems like Salt/Puppet/Ansible can go ahead and perform the upgrade. In my previos blogs, i've explained on how to build a Debian package and how to create and manage APT repo's via aptly. In this i'm going to automate the entire process.</p>

<p>So the flow is like, We have a github repo, and once a changed is pushed to the repo, github will send a hook to our Jenkins server which inturn triggers the Jenkins package build. Once the package has been succesfuly built, jenkins will automatically add the new packages to our repo and publish the same to our APT repo via <code>aptly</code></p>

<h4>Installing Jenkins</h4>

<p>First let's setup a Jenkins build server.</p>

<pre><code>$ wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -

$ echo "deb http://pkg.jenkins-ci.org/debian binary/" &gt; /etc/apt/sources.list.d/jenkins.list

$ apt-get update &amp;&amp; apt-get install jenkins

$ /etc/init.d/jenkins restart
</code></pre>

<p>Once this Jenkins service is started we can access it via "<em>http://jenkins-server-ip:8080</em>". By default there is no authentication, so accessing the URL will open up the Jenkins UI.</p>

<h4>Creating a Build Job in Jenkins</h4>

<p>In order to use a Git repo, we have to instsall the Git plugin first. Go to "<em>Manage Jenkins</em>" - > "<em>Manage Plugins</em>" - > "<em>Available</em>" and search for "<em>GIT plugin</em>" and install it. Once the Git plugin has been installed we can create a new build job.</p>

<p>Click on "<em>New Item</em>" on the Home Page and Select "<em>Freestyle Project</em>" and Click on "OK". On the Next page, we need to configure all the necessary steps for build job. Fill in the necessary details like Project Name, Description etc. Under "Source Code Management", select <code>Git</code> and enter the Repo URL. Make sure that the jenkins user has access to the repo. We can also use Deploy keys, but i've generated a separate ssh key for Jenkins user and the same has been added to Github. Under "<em>Build Triggers</em>" select 'Build when a change is pushed to GitHub' so that Jenkins will start the build job everytime when a change has been pushed to repo.</p>

<p>{% img /images/aptly1.png %}</p>

<p>{% img /images/aptly2.png %}</p>

<p>Under the <code>Build</code> section, Click on "<em>Add build step</em>" and select '<em>Execute shell</em>' and let's add our package build script which is stage 1.</p>

<pre><code>set -e
set -x
set -u
debuild -us -uc
</code></pre>

<p>Stage 2 is adding the newly build pacakge to our apt repo and publish the udpate to our repo so that our APT will server the new package</p>

<pre><code>aptly repo add myapt ../openvpn*.deb
/usr/bin/env script -qfc "aptly publish -passphrase=&lt;GPG passphrase&gt; update myapt"
</code></pre>

<p>{% img /images/aptly3.png %}</p>

<p>If you see my above command, i've used the <code>script</code> command. This is because, i was getting the error <code>aptly stderr: gpg: cannot open tty /dev/tty': No such device or address</code> whenever i try to update a repo. This is <a href="https://github.com/smira/aptly/issues/144">bug</a> in aptly. The fix has been placed on the Master branch but its not yet released. The <code>script</code> command is a temporary work around for this bug.</p>

<p>Now we have a Build job ready. We can manually trigger a build to test if the Job is working fine. If the build is successfull, we are done with our build server. Now the final step is Configuring Github to send a trigger whenever any change is pushed to Github.</p>

<h4>Configuring Github Triggers</h4>

<p>Go the Github repo and Click on the Repo settings. Open "<em>Webhooks and Services</em>" and select "<em>Add Service</em>" and select "<em>GitHub plugin</em>".Now it will ask for Jenkin's Hook URL, which is "<em>http://<Name of Jenkins server>:8080/github-webhook/</em>" and add the service. Once the service is set, we can click on "Test service" to check if the webhook is working fine.</p>

<p>{% img /images/aptly4.png %}</p>

<p>Once the test hook is created, go to the Jenkins job page and select "<em>GitHub Hook Log</em>". The test hook should get displayed there. If not there is something wrong on the config.</p>

<p>{% img /images/aptly5.png %}</p>

<p>Now we have a fully automated build and release management. Config management tools like Salt/Ansible etc.. can go ahead and start the deployment process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Debian APT repository via Aptly]]></title>
    <link href="http://beingasysadmin.com/blog/2014/12/07/managing-debian-apt-repository-via-aptly/"/>
    <updated>2014-12-07T07:04:00+00:00</updated>
    <id>http://beingasysadmin.com/blog/2014/12/07/managing-debian-apt-repository-via-aptly</id>
    <content type="html"><![CDATA[<p>In my previous <a href="https://beingasysadmin.wordpress.com/2014/12/03/building-a-debian-package/">blog</a>, i've explained how to build a Debian pacakge from source. In this blog i'm to explain how to create and manage our own apt repository. Enter <a href="aptly.info">aptly</a>,is a swiss army knife for Debian repository management: it allows us to mirror remote repositories, manage local package repositories, take snapshots, pull new versions of packages along with dependencies, publish as Debian repository. Aptly can upload the repo to Amazon S3, but we need to install APT S3 <a href="https://github.com/castlabs/apt-s3">support</a>, in order to use it from S3.</p>

<p>First, let's install aptly on our build server. A more detailed documentation on installation is available in the <a href="http://www.aptly.info/download/">website</a></p>

<pre><code>$ echo "deb http://repo.aptly.info/ squeeze main" &gt; /etc/apt/sources.list

$ gpg --keyserver keys.gnupg.net --recv-keys 2A194991

$ gpg -a --export 2A194991 | sudo apt-key add -

$ apt-get update &amp;&amp; apt-get install aptly
</code></pre>

<p>Let's create a repo,</p>

<pre><code>$ aptly repo create -distribution=wheezy -component=main my-repo    # where my-repo is the name of the repository
</code></pre>

<p>Once the repo is created, we can start adding our newly created packages to our new repo.</p>

<pre><code>$ aptly repo add &lt;repo name&gt; &lt;your debian file&gt;    # in my case aptly repo add myrepo openvpn_2.3.6_amd64.deb
</code></pre>

<p>The above command will add the new package to the repo. Now in order to make this repo usable, we need to publish this repo. A valid GPG key is required for publishing the repo. So let's create the gpg key for aptly.</p>

<pre><code>$ gpg --gen-key

$ gpg --export --armor &lt;email-id-used-fo-gpg-key-creation&gt; &gt; myrepo-pubkey.asc   # creates a pubkey that distributed

$ gpg --send-key KEYNAME     # This command can be used if we want to send the key to a public server, we can also pass --keyserver &lt;server-url&gt;, if we want to specifiy a specific keyserver
</code></pre>

<p>Once we have our GPG key, we can publish our repo. By default aptly can publish the repo to S3 or it can publish it locally and we can use any webserver to servce this repo.</p>

<pre><code>$ aptly publish --distribution="wheezy" repo my-repo
</code></pre>

<p>Once published, we can point the webserver to "~/.aptly/", where our repo files will be created. Aptly also comes with an embedded webserver which can be invoked by running <code>aptly serve</code>. Aptly really makes the repo management so easy. We can actually integrate this into our jenkins job so that each time when we build a package, we can directly add and upload the same to our repository.</p>
]]></content>
  </entry>
  
</feed>
